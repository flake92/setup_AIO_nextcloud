name: Test Nextcloud AIO Installation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  syntax-check:
    runs-on: ubuntu-latest
    name: Shell Script Syntax Check
    steps:
      - uses: actions/checkout@v4
      
      - name: Install shellcheck
        run: sudo apt-get update && sudo apt-get install -y shellcheck
      
      - name: Check script syntax
        run: |
          echo "Checking script syntax..."
          bash -n install-nextcloud-aio.sh
          echo "✅ Syntax check passed"
      
      - name: Run shellcheck
        run: |
          echo "Running shellcheck..."
          shellcheck install-nextcloud-aio.sh || echo "⚠️ Shellcheck warnings found"
          echo "✅ Shellcheck completed"

  url-test:
    runs-on: ubuntu-latest
    name: Test Download URL
    steps:
      - uses: actions/checkout@v4
      
      - name: Test script download
        run: |
          echo "Testing script download URL..."
          wget --spider https://raw.githubusercontent.com/flake92/setup_AIO_nextcloud/main/install-nextcloud-aio.sh
          echo "✅ Download URL is accessible"
      
      - name: Test actual download
        run: |
          echo "Testing actual file download..."
          wget https://raw.githubusercontent.com/flake92/setup_AIO_nextcloud/main/install-nextcloud-aio.sh -O test-download.sh
          chmod +x test-download.sh
          bash -n test-download.sh
          echo "✅ Downloaded script is valid"

  docker-commands-test:
    runs-on: ubuntu-latest
    name: Test Docker Commands
    steps:
      - uses: actions/checkout@v4
      
      - name: Test Docker installation commands
        run: |
          echo "Testing Docker installation commands..."
          
          # Test Docker GPG key URL
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg > /dev/null
          echo "✅ Docker GPG key accessible"
          
          # Test Docker repository URL
          curl -fsSL https://download.docker.com/linux/ubuntu/dists/$(lsb_release -cs)/stable/binary-amd64/Packages.gz > /dev/null
          echo "✅ Docker repository accessible"
          
          # Test Nextcloud AIO image
          docker pull nextcloud/all-in-one:latest
          echo "✅ Nextcloud AIO image pullable"

  ip-detection-test:
    runs-on: ubuntu-latest
    name: Test IP Detection
    steps:
      - uses: actions/checkout@v4
      
      - name: Test IP detection services
        run: |
          echo "Testing IP detection services..."
          
          # Test ifconfig.me
          curl -s --connect-timeout 5 ifconfig.me && echo " ✅ ifconfig.me working" || echo "⚠️ ifconfig.me failed"
          
          # Test ipinfo.io
          curl -s --connect-timeout 5 ipinfo.io/ip && echo " ✅ ipinfo.io working" || echo "⚠️ ipinfo.io failed"
          
          # Test icanhazip.com
          curl -s --connect-timeout 5 icanhazip.com && echo " ✅ icanhazip.com working" || echo "⚠️ icanhazip.com failed"
          
          # Test checkip.amazonaws.com
          curl -s --connect-timeout 5 checkip.amazonaws.com && echo " ✅ checkip.amazonaws.com working" || echo "⚠️ checkip.amazonaws.com failed"

  dry-run-test:
    runs-on: ubuntu-latest
    name: Dry Run Installation Test
    steps:
      - uses: actions/checkout@v4
      
      - name: Create test environment
        run: |
          echo "Creating test environment..."
          sudo mkdir -p /var/log
          sudo touch /var/log/nextcloud-aio-install.log
          sudo chmod 666 /var/log/nextcloud-aio-install.log
      
      - name: Test script functions (dry run)
        run: |
          echo "Testing script functions..."
          
          # Create modified script for testing
          cat > test-script.sh << 'EOF'
          #!/bin/bash
          set -euo pipefail
          
          # Colors
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          BLUE='\033[0;34m'
          NC='\033[0m'
          
          LOG_FILE="/var/log/nextcloud-aio-install.log"
          VPS_IP=""
          
          print_info() { echo -e "${BLUE}ℹ${NC} $1"; }
          print_success() { echo -e "${GREEN}✅${NC} $1"; }
          print_error() { echo -e "${RED}❌${NC} $1"; }
          
          detect_vps_ip() {
              print_info "Testing IP detection..."
              VPS_IP=$(curl -s --connect-timeout 5 ifconfig.me 2>/dev/null || echo "127.0.0.1")
              if [[ "$VPS_IP" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
                  print_success "IP detected: $VPS_IP"
              else
                  print_error "IP detection failed"
              fi
          }
          
          test_docker_commands() {
              print_info "Testing Docker commands (dry run)..."
              
              # Test if commands exist
              command -v curl >/dev/null 2>&1 && print_success "curl available" || print_error "curl missing"
              command -v gpg >/dev/null 2>&1 && print_success "gpg available" || print_error "gpg missing"
              command -v lsb_release >/dev/null 2>&1 && print_success "lsb_release available" || print_error "lsb_release missing"
              
              print_success "Docker commands test completed"
          }
          
          # Run tests
          detect_vps_ip
          test_docker_commands
          
          print_success "All dry run tests completed"
          EOF
          
          chmod +x test-script.sh
          ./test-script.sh

  integration-test:
    runs-on: ubuntu-latest
    name: Full Integration Test
    steps:
      - uses: actions/checkout@v4
      
      - name: Run full installation test
        run: |
          echo "Running integration test..."
          
          # Create test version that doesn't actually install Docker or run containers
          cat > integration-test.sh << 'EOF'
          #!/bin/bash
          set -euo pipefail
          
          # Test version of the installation script
          echo "🧪 INTEGRATION TEST MODE"
          echo "Testing all components without actual installation..."
          
          # Test 1: IP Detection
          echo "Test 1: IP Detection"
          VPS_IP=$(curl -s --connect-timeout 5 ifconfig.me 2>/dev/null || echo "127.0.0.1")
          if [[ "$VPS_IP" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
              echo "✅ IP detection working: $VPS_IP"
          else
              echo "❌ IP detection failed"
              exit 1
          fi
          
          # Test 2: System Requirements Check
          echo "Test 2: System Requirements"
          if [ "$EUID" -eq 0 ]; then
              echo "✅ Running as root"
          else
              echo "ℹ️ Not running as root (expected in CI)"
          fi
          
          if command -v apt &> /dev/null; then
              echo "✅ apt package manager available"
          else
              echo "❌ apt not available"
              exit 1
          fi
          
          # Test 3: Docker URLs
          echo "Test 3: Docker Repository URLs"
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg > /dev/null && echo "✅ Docker GPG key accessible" || (echo "❌ Docker GPG key failed" && exit 1)
          
          # Test 4: Nextcloud AIO Image
          echo "Test 4: Nextcloud AIO Image"
          docker pull nextcloud/all-in-one:latest && echo "✅ Nextcloud AIO image accessible" || (echo "❌ Image pull failed" && exit 1)
          
          echo "🎉 All integration tests passed!"
          EOF
          
          chmod +x integration-test.sh
          ./integration-test.sh
