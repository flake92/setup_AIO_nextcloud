#!/bin/bash

# –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ nextcloud-aio.sh
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

SCRIPT_PATH="./nextcloud-aio.sh"
TEST_LOG="/tmp/nextcloud-aio-test.log"

echo -e "${BLUE}üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è nextcloud-aio.sh${NC}\n"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞
test_file_exists() {
    echo -n "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞... "
    if [ -f "$SCRIPT_PATH" ]; then
        echo -e "${GREEN}‚úì${NC}"
        return 0
    else
        echo -e "${RED}‚úó –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ bash
test_bash_syntax() {
    echo -n "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ bash... "
    if bash -n "$SCRIPT_PATH" 2>/dev/null; then
        echo -e "${GREEN}‚úì${NC}"
        return 0
    else
        echo -e "${RED}‚úó –û—à–∏–±–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞${NC}"
        bash -n "$SCRIPT_PATH"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ shellcheck (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
test_shellcheck() {
    echo -n "–ü—Ä–æ–≤–µ—Ä–∫–∞ shellcheck... "
    if command -v shellcheck >/dev/null 2>&1; then
        local warnings=$(shellcheck "$SCRIPT_PATH" 2>&1 | grep -c "warning" || true)
        local errors=$(shellcheck "$SCRIPT_PATH" 2>&1 | grep -c "error" || true)
        
        if [ "$errors" -eq 0 ]; then
            if [ "$warnings" -eq 0 ]; then
                echo -e "${GREEN}‚úì –ë–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π${NC}"
            else
                echo -e "${YELLOW}‚ö† $warnings –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π${NC}"
            fi
            return 0
        else
            echo -e "${RED}‚úó $errors –æ—à–∏–±–æ–∫${NC}"
            return 1
        fi
    else
        echo -e "${YELLOW}‚ö† shellcheck –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        return 0
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –û–°
test_os_detection() {
    echo -n "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –û–°... "
    
    if grep -q "detect_os()" "$SCRIPT_PATH" || grep -q "detect_os " "$SCRIPT_PATH"; then
        echo -e "${GREEN}‚úì –§—É–Ω–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞${NC}"
        return 0
    else
        echo -e "${RED}‚úó –§—É–Ω–∫—Ü–∏—è detect_os –Ω–µ –Ω–∞–π–¥–µ–Ω–∞${NC}"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π —Å—Ç–∞—Ç—É—Å–∞
test_status_functions() {
    echo -n "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π —Å—Ç–∞—Ç—É—Å–∞... "
    
    local functions=("get_container_status" "get_install_status" "get_install_progress")
    local found=0
    
    for func in "${functions[@]}"; do
        if grep -q "${func}()" "$SCRIPT_PATH"; then
            ((found++))
        fi
    done
    
    if [ "$found" -eq 3 ]; then
        echo -e "${GREEN}‚úì –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω—ã${NC}"
        return 0
    else
        echo -e "${RED}‚úó –ù–∞–π–¥–µ–Ω–æ $found –∏–∑ 3 —Ñ—É–Ω–∫—Ü–∏–π${NC}"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
test_environment_variables() {
    echo -n "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è... "
    
    local vars=("SCREEN_SESSION" "CONTAINER_NAME" "INSTALL_LOG" "PID_FILE")
    local found=0
    
    for var in "${vars[@]}"; do
        if grep -q "$var=" "$SCRIPT_PATH"; then
            ((found++))
        fi
    done
    
    if [ "$found" -eq 4 ]; then
        echo -e "${GREEN}‚úì –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã${NC}"
        return 0
    else
        echo -e "${RED}‚úó –ù–∞–π–¥–µ–Ω–æ $found –∏–∑ 4 –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö${NC}"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –º–µ–Ω—é
test_menu_functions() {
    echo -n "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –º–µ–Ω—é... "
    
    local functions=("print_banner" "print_menu" "print_status_box")
    local found=0
    
    for func in "${functions[@]}"; do
        if grep -q "${func}()" "$SCRIPT_PATH"; then
            ((found++))
        fi
    done
    
    if [ "$found" -eq 3 ]; then
        echo -e "${GREEN}‚úì –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–µ–Ω—é –Ω–∞–π–¥–µ–Ω—ã${NC}"
        return 0
    else
        echo -e "${RED}‚úó –ù–∞–π–¥–µ–Ω–æ $found –∏–∑ 3 —Ñ—É–Ω–∫—Ü–∏–π –º–µ–Ω—é${NC}"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker
test_docker_functions() {
    echo -n "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π Docker... "
    
    if grep -q "get.docker.com" "$SCRIPT_PATH"; then
        echo -e "${GREEN}‚úì –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ Docker${NC}"
        return 0
    else
        echo -e "${RED}‚úó –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ Docker –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
test_error_handling() {
    echo -n "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫... "
    
    local error_patterns=("exit 1" "return 1" "|| exit" "|| return")
    local found=0
    
    for pattern in "${error_patterns[@]}"; do
        if grep -q "$pattern" "$SCRIPT_PATH"; then
            ((found++))
        fi
    done
    
    if [ "$found" -gt 0 ]; then
        echo -e "${GREEN}‚úì –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç${NC}"
        return 0
    else
        echo -e "${YELLOW}‚ö† –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫${NC}"
        return 0
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
test_security() {
    echo -n "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏... "
    
    local issues=0
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ hardcoded –ø–∞—Ä–æ–ª–∏
    if grep -i "password.*=" "$SCRIPT_PATH" | grep -v "read" | grep -q "="; then
        echo -e "${RED}‚úó –í–æ–∑–º–æ–∂–Ω—ã hardcoded –ø–∞—Ä–æ–ª–∏${NC}"
        ((issues++))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ eval
    if grep -q "eval" "$SCRIPT_PATH"; then
        echo -e "${RED}‚úó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ eval –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ${NC}"
        ((issues++))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ curl –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL
    if grep -q "curl.*-k\|curl.*--insecure" "$SCRIPT_PATH"; then
        echo -e "${RED}‚úó Curl –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL${NC}"
        ((issues++))
    fi
    
    if [ "$issues" -eq 0 ]; then
        echo -e "${GREEN}‚úì –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã${NC}"
        return 0
    else
        echo -e "${RED}‚úó –ù–∞–π–¥–µ–Ω–æ $issues –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏${NC}"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞–º–∏
test_distro_compatibility() {
    echo -n "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞–º–∏... "
    
    local package_managers=("apt" "dnf" "yum" "pacman" "zypper")
    local found=0
    
    for pm in "${package_managers[@]}"; do
        if grep -q "$pm" "$SCRIPT_PATH"; then
            ((found++))
        fi
    done
    
    if [ "$found" -ge 4 ]; then
        echo -e "${GREEN}‚úì –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–æ–≤${NC}"
        return 0
    else
        echo -e "${YELLOW}‚ö† –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–æ–≤${NC}"
        return 0
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
run_tests() {
    local total_tests=0
    local passed_tests=0
    local failed_tests=0
    
    echo -e "${BLUE}–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...${NC}\n"
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    local tests=(
        "test_file_exists"
        "test_bash_syntax" 
        "test_shellcheck"
        "test_os_detection"
        "test_status_functions"
        "test_environment_variables"
        "test_menu_functions"
        "test_docker_functions"
        "test_error_handling"
        "test_security"
        "test_distro_compatibility"
    )
    
    for test in "${tests[@]}"; do
        ((total_tests++))
        if $test; then
            ((passed_tests++))
        else
            ((failed_tests++))
        fi
    done
    
    echo -e "\n${BLUE}–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:${NC}"
    echo -e "–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $total_tests"
    echo -e "${GREEN}–ü—Ä–æ–π–¥–µ–Ω–æ: $passed_tests${NC}"
    echo -e "${RED}–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: $failed_tests${NC}"
    
    if [ "$failed_tests" -eq 0 ]; then
        echo -e "\n${GREEN}üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!${NC}"
        return 0
    else
        echo -e "\n${YELLOW}‚ö† –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤—ã—à–µ.${NC}"
        return 1
    fi
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
run_tests

echo -e "\n${BLUE}–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.${NC}"
