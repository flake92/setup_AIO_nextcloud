#!/bin/bash

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Nextcloud AIO
# –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

SCRIPT_PATH="./nextcloud-aio.sh"

echo -e "${BLUE}üîß –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è nextcloud-aio.sh${NC}\n"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è IP –∞–¥—Ä–µ—Å–∞
test_ip_detection() {
    echo -n "–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è IP –∞–¥—Ä–µ—Å–∞... "
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é detect_ip –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –µ—ë
    local ip_sources=("ifconfig.me" "ipinfo.io" "icanhazip.com")
    local working_sources=0
    
    for source in "${ip_sources[@]}"; do
        if curl -s --connect-timeout 5 "$source" >/dev/null 2>&1; then
            ((working_sources++))
        fi
    done
    
    if [ "$working_sources" -gt 0 ]; then
        echo -e "${GREEN}‚úì $working_sources –∏–∑ ${#ip_sources[@]} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã${NC}"
        return 0
    else
        echo -e "${RED}‚úó –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ IP${NC}"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Docker —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
test_docker_availability() {
    echo -n "–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Docker —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞... "
    
    if curl -fsSL https://get.docker.com >/dev/null 2>&1; then
        echo -e "${GREEN}‚úì Docker —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
        return 0
    else
        echo -e "${RED}‚úó Docker —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
test_os_detection_real() {
    echo -n "–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –û–°... "
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ /etc/os-release
    if [ -f /etc/os-release ]; then
        # shellcheck source=/dev/null
        . /etc/os-release
        echo -e "${GREEN}‚úì –û–°: $ID $VERSION_ID${NC}"
        return 0
    elif [ -f /etc/redhat-release ]; then
        echo -e "${GREEN}‚úì –û–°: RHEL/CentOS${NC}"
        return 0
    elif [ -f /etc/arch-release ]; then
        echo -e "${GREEN}‚úì –û–°: Arch Linux${NC}"
        return 0
    else
        echo -e "${YELLOW}‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –û–°${NC}"
        return 0
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–∞–∫–µ—Ç–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
test_package_managers() {
    echo -n "–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–∞–∫–µ—Ç–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤... "
    
    local managers=("apt-get" "dnf" "yum" "pacman" "zypper")
    local available=0
    local current=""
    
    for manager in "${managers[@]}"; do
        if command -v "$manager" >/dev/null 2>&1; then
            current="$manager"
            ((available++))
        fi
    done
    
    if [ "$available" -gt 0 ]; then
        echo -e "${GREEN}‚úì –î–æ—Å—Ç—É–ø–µ–Ω: $current${NC}"
        return 0
    else
        echo -e "${RED}‚úó –ü–∞–∫–µ—Ç–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã${NC}"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
test_system_requirements() {
    echo -n "–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π... "
    
    local issues=0
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ RAM (–º–∏–Ω–∏–º—É–º 2GB) - –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è macOS
    local ram_gb
    if command -v free >/dev/null 2>&1; then
        ram_gb=$(free -g | awk '/^Mem:/{print $2}')
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        ram_gb=$(($(sysctl -n hw.memsize) / 1024 / 1024 / 1024))
    else
        ram_gb=4  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ RAM –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
    fi
    
    if [ "$ram_gb" -lt 2 ]; then
        echo -e "${RED}‚úó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ RAM: ${ram_gb}GB < 2GB${NC}"
        ((issues++))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ (–º–∏–Ω–∏–º—É–º 40GB) - –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è macOS
    local free_gb
    if [[ "$OSTYPE" == "darwin"* ]]; then
        free_gb=$(df -g / | awk 'NR==2{print $4}')
    else
        free_gb=$(df --block-size=1G / | awk 'NR==2{print $4}' 2>/dev/null || df / | awk 'NR==2{print int($4/1024/1024)}')
    fi
    
    if [ "$free_gb" -lt 40 ]; then
        echo -e "${RED}‚úó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞: ${free_gb}GB < 40GB${NC}"
        ((issues++))
    fi
    
    if [ "$issues" -eq 0 ]; then
        echo -e "${GREEN}‚úì –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã (RAM: ${ram_gb}GB, –î–∏—Å–∫: ${free_gb}GB)${NC}"
        return 0
    else
        echo -e "${RED}‚úó $issues –ø—Ä–æ–±–ª–µ–º —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏${NC}"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
test_ports_availability() {
    echo -n "–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤... "
    
    local ports=(8080 8443 3478)
    local busy_ports=()
    
    for port in "${ports[@]}"; do
        if command -v ss >/dev/null 2>&1; then
            if ss -tlnp | grep -q ":$port "; then
                busy_ports+=("$port")
            fi
        elif command -v netstat >/dev/null 2>&1; then
            if netstat -tlnp 2>/dev/null | grep -q ":$port "; then
                busy_ports+=("$port")
            fi
        elif command -v lsof >/dev/null 2>&1; then
            if lsof -i ":$port" >/dev/null 2>&1; then
                busy_ports+=("$port")
            fi
        fi
    done
    
    if [ ${#busy_ports[@]} -eq 0 ]; then
        echo -e "${GREEN}‚úì –í—Å–µ –ø–æ—Ä—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã${NC}"
        return 0
    else
        echo -e "${YELLOW}‚ö† –ó–∞–Ω—è—Ç—ã –ø–æ—Ä—Ç—ã: ${busy_ports[*]}${NC}"
        return 0
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
test_permissions() {
    echo -n "–¢–µ—Å—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞... "
    
    if [ "$EUID" -eq 0 ]; then
        echo -e "${GREEN}‚úì –ó–∞–ø—É—â–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ root${NC}"
        return 0
    elif command -v sudo >/dev/null 2>&1; then
        echo -e "${YELLOW}‚ö† –¢—Ä–µ–±—É–µ—Ç—Å—è sudo${NC}"
        return 0
    else
        echo -e "${RED}‚úó –ù–µ—Ç –ø—Ä–∞–≤ root –∏ sudo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
test_dependencies() {
    echo -n "–¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π... "
    
    local deps=("curl" "wget" "screen")
    local missing=()
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" >/dev/null 2>&1; then
            missing+=("$dep")
        fi
    done
    
    if [ ${#missing[@]} -eq 0 ]; then
        echo -e "${GREEN}‚úì –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã${NC}"
        return 0
    else
        echo -e "${YELLOW}‚ö† –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: ${missing[*]}${NC}"
        return 0
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
test_network_connectivity() {
    echo -n "–¢–µ—Å—Ç —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è... "
    
    local test_urls=("google.com" "docker.com" "github.com")
    local reachable=0
    
    for url in "${test_urls[@]}"; do
        if ping -c 1 -W 3 "$url" >/dev/null 2>&1; then
            ((reachable++))
        fi
    done
    
    if [ "$reachable" -gt 0 ]; then
        echo -e "${GREEN}‚úì –°–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ ($reachable –∏–∑ ${#test_urls[@]})${NC}"
        return 0
    else
        echo -e "${RED}‚úó –ù–µ—Ç —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è${NC}"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
test_docker_status() {
    echo -n "–¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ Docker... "
    
    if command -v docker >/dev/null 2>&1; then
        if systemctl is-active docker >/dev/null 2>&1; then
            echo -e "${GREEN}‚úì Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω${NC}"
            return 0
        else
            echo -e "${YELLOW}‚ö† Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω${NC}"
            return 0
        fi
    else
        echo -e "${BLUE}‚Ñπ Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)${NC}"
        return 0
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ Nextcloud
test_existing_containers() {
    echo -n "–¢–µ—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤... "
    
    if command -v docker >/dev/null 2>&1; then
        local containers=$(docker ps -a --filter "name=nextcloud" --format "{{.Names}}" 2>/dev/null || true)
        if [ -n "$containers" ]; then
            echo -e "${YELLOW}‚ö† –ù–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: $containers${NC}"
            return 0
        else
            echo -e "${GREEN}‚úì –ö–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –Ω–µ—Ç${NC}"
            return 0
        fi
    else
        echo -e "${BLUE}‚Ñπ Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        return 0
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
run_integration_tests() {
    local total_tests=0
    local passed_tests=0
    local failed_tests=0
    
    echo -e "${BLUE}–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...${NC}\n"
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    local tests=(
        "test_ip_detection"
        "test_docker_availability"
        "test_os_detection_real"
        "test_package_managers"
        "test_system_requirements"
        "test_ports_availability"
        "test_permissions"
        "test_dependencies"
        "test_network_connectivity"
        "test_docker_status"
        "test_existing_containers"
    )
    
    for test in "${tests[@]}"; do
        ((total_tests++))
        if $test; then
            ((passed_tests++))
        else
            ((failed_tests++))
        fi
    done
    
    echo -e "\n${BLUE}–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:${NC}"
    echo -e "–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $total_tests"
    echo -e "${GREEN}–ü—Ä–æ–π–¥–µ–Ω–æ: $passed_tests${NC}"
    echo -e "${RED}–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: $failed_tests${NC}"
    
    if [ "$failed_tests" -eq 0 ]; then
        echo -e "\n${GREEN}üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Nextcloud AIO!${NC}"
        return 0
    else
        echo -e "\n${YELLOW}‚ö† –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∞.${NC}"
        return 1
    fi
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
run_integration_tests

echo -e "\n${BLUE}–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.${NC}"
